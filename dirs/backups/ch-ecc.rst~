
ECC
=====================

平行线
----------------------

平行线，永不相交。没有人怀疑把：）不过到了近代这个结论遭到了质疑。平行线会不会在很远很远的地方相交了？事实上没有人见到过。所以“平行线，永不相交”只是假设（大家想想初中学习的平行公理，是没有证明的）。既然可以假设平行线永不相交，也可以假设平行线在很远很远的地方相交了。即平行线相交于无穷远点P∞（请大家闭上眼睛，想象一下那个无穷远点P∞，P∞是不是很虚幻，其实与其说数学锻炼人的抽象能力，还不如说是锻炼人的想象力）。给个图帮助理解一下：


射影平面坐标系
----------------------

射影平面坐标系是对普通平面直角坐标系（就是我们初中学到的那个笛卡儿平面直角坐标系）的扩展。我们知道普通平面直角坐标系没有为无穷远点设计坐标，不能表示无穷远点。为了表示无穷远点，产生了射影平面坐标系，当然射影平面坐标系同样能很好的表示旧有的平常点.

.. math::

        \frac{x^2}{a^2}+\frac{y^2}{b^2}=1

        \because x=X/Z,y=Y/Z

        \therefore

椭圆曲线
----------------------

椭圆曲线的定义,一条椭圆曲线是在射影平面上满足方程:

.. math::
        
        Y^2Z+a_1XYZ+a_3YZ^2=X^3+a_2X^2Z+a_4XZ^2+a_6Z^3

的所有点的集合，且曲线上的每个点都是非奇异(或光滑)的。

所谓“非奇异”或“光滑”的，在数学中是指曲线上任意一点的偏导数

.. math::

        \frac{\partial f}{\partial x},\frac{\partial f}{\partial y},\frac{\partial f}{\partial z}

不能同时为0，即满足方程的任意一点都存在切线。

椭圆曲线上的加法
------------------------

上一节，我们已经看到了椭圆曲线的图象，但点与点之间好象没有什么联系。我们能不能建立一个类似于在实数轴上加法的运算法则呢？天才的数学家找到了这一运算法则

自从近世纪代数学引入了群、环、域的概念，使得代数运算达到了高度的统一。比如数学家总结了普通加法的主要特征，提出了加群（也叫交换群，或Abel（阿贝尔）群），在加群的眼中。实数的加法和椭圆曲线的上的加法没有什么区别。这也许就是数学抽象把：）。关于群以及加群的具体概念请参考近世代数方面的数学书。

运算法则：任意取椭圆曲线上两点P、Q （若P、Q两点重合，则做P点的切线）做直线交于椭圆曲线的另一点R’，过R’做y轴的平行线交于R。我们规定P+Q=R。（如图）

.. figure:: images/add.png

法则详解：
 * 这里的+不是实数中普通的加法，而是从普通加法中抽象出来的加法，他具备普通加法的一些性质，但具体的运算法则显然与普通加法不同。
 * 根据这个法则，可以知道椭圆曲线无穷远点O∞与椭圆曲线上一点P的连线交于P’，过P’作y轴的平行线交于P，所以有 无穷远点 O∞+ P = P 。
   这样，无穷远点 O∞的作用与普通加法中零的作用相当（0+2=2），我们把无穷远点 O∞ 称为 零元。
   同时我们把P’称为P的负元（简称，负P；记作，-P）。（参见下图）

密码学中的椭圆曲线
------------------------

我们现在基本上对椭圆曲线有了初步的认识，这是值得高兴的。但请大家注意，前面学到的椭圆曲线是连续的，并不适合用于加密；所以，我们必须把椭圆曲线变成离散的点。

让我们想一想，为什么椭圆曲线为什么连续？是因为椭圆曲线上点的坐标，是实数的（也就是说前面讲到的椭圆曲线是定义在实数域上的），实数是连续的，导致了曲线的连续。因此，我们要把椭圆曲线定义在有限域上（顾名思义，有限域是一种只有由有限个元素组成的域）。

域的概念是从我们的有理数，实数的运算中抽象出来的，严格的定义请参考近世代数方面的数。简单的说，域中的元素同有理数一样，有自己得加法、乘法、除法、单位元(1)，零元(0),并满足交换率、分配率。

下面，我们给出一个有限域Fp，这个域只有有限个元素。

* Fp中只有p（p为素数）个元素0,1,2 …… p-2,p-1；
* Fp 的加法 :math:`(a+b)` 法则是 :math:`a+b \equiv c (\mod p)`；即，:math:`(a+c) \div p` 的余数 和 :math:`c \div p` 的余数相同。
* Fp 的乘法 :math:`(a \times b)` 法则是 :math:`a \times b \equiv c (\mod p)` ；
* Fp 的除法 :math:`(a \div b)` 法则是  :math:`a/b \equiv c (\mod p)` ;即 :math:`a \times b-1 \equiv c (\mod p)` ;
  (b-1也是一个0到p-1之间的整数，但满足 :math:`b \times b-1 \equiv 1 \mod p` ；具体求法可以参考初等数论!）。
* Fp 的单位元是1，零元是 0。

同时，并不是所有的椭圆曲线都适合加密。:math:`y^2=x^3+ax+b` 是一类可以用来加密的椭圆曲线，也是最为简单的一类。下面我们就把 :math:`y^2=x^3+ax+b` 
这条曲线定义在Fp上：

选择两个满足下列条件的小于p(p为素数)的非负整数a,b

* :math:`4a^3+27b^2 \ne 0 (\mod p)` 则满足下列方程的所有点(x,y)，再加上 无穷远点 :math:`O_\infty` ，构成一条椭圆曲线。
* :math:`y^2=x^3+ax+b (\mod p)` , 其中 x,y属于0到p-1间的整数，并将这条椭圆曲线记为Ep(a,b)
  我们看一下 :math:`y^2=x^3+x+1 (\mod 23)` 的图像:

.. figure:: images/e23.png

        

图中计算过程如下:

* :math:`(x=1) => (x^3+x+1=3) \equiv (1 \mod 23)`
* :math:`(x=2) => (x^3+x+1=11) => (y^2 \mod 23=11) ?` 试算一下发现 :math:`y<23` 并没有y符合要求
* :math:`(x=3) => (x^3+x+1=9) => (y^2 \mod 23=9)` 试算一下发现 :math:`(10^2 \mod 23 \equiv 9)` 和 :math:`(13^2 \mod 23 \equiv 9)`
  符合Fp域的要求

是不是觉得不可思议？椭圆曲线，怎么变成了这般模样，成了一个一个离散的点？
　　
椭圆曲线在不同的数域中会呈现出不同的样子，但其本质仍是一条椭圆曲线。
举一个不太恰当的例子，好比是水，在常温下，是液体；到了零下，水就变成冰，成了固体；
而温度上升到一百度，水又变成了水蒸气。但其本质仍是 :math:`H_2O` .
　　
Fp上的椭圆曲线同样有加法，但已经不能给以几何意义的解释。不过，加法法则和实数域上的差不多.

1. 无穷远点 :math:`O_\infty` 是零元，有 :math:`O_\infty + O_\infty=O_\infty,O_\infty+P=P`;
2. P(x,y)的负元是(x,-y),有 :math:`P+(-P)=O_\infty`;
3. P(x1,y1),Q(x2,y2)的和R(x3,y3)有如下关系：

        .. math::

                x_3 \equiv k^2-x_1-x_2 (\mod p) 

                y_3 \equiv k(x_1-x_3)-y_1 (\mod p)

其中若P=Q 则 :math:`k=(3x_2+a)/2y_1`  若 :math:`P \ne Q` ，则 :math:`k=(y_2-y_1)/(x_2-x_1)`

例5.1 已知E23(1,1)上两点P(3,10)，Q(9,7)，求1)-P,2) P+Q,3) 2P

        1.  –P的值为(3,-10)
        2.  求解P+Q

                .. math::


                    k=(7-10)/(9-3)=-1/2
                    
                    \because 2*12 \equiv 1 \quad (mod \quad 23)

                    \therefore k \equiv -1*12 \quad (mod \quad 23) 

                    \therefore k=11

                    x=112-3-9=109 \equiv 17 \quad (mod \quad 23)

                    y=11[3-(-6)]-10=89 \equiv 20 \quad (mod \quad 23)

                    \therefore P+Q=(17,20)

        3. 求解2P 

                .. math::

                    k=[3(32)+1]/(2*10)=1/4 \equiv 6 \quad (mod \quad 23)

                    x=62-3-3=30 \equiv 20 \quad (mod \quad 23)

                    y=6(3-7)-10=-34 \equiv 12 \quad (mod \quad 23)

                    \therefore 2P=(7,12)

最后，我们讲一下椭圆曲线上的点的阶。
　　
如果椭圆曲线上一点P，存在最小的正整数n，使得数乘nP=O∞，则将n称为P的 阶，若n不存在，我们说P是无限阶的。

事实上，在有限域上定义的椭圆曲线上所有的点的阶n都是存在的（证明，请参考近世代数方面的书）

椭圆曲线上简单的加密/解密
-----------------------------



公开密钥算法总是要基于一个数学上的难题。比如RSA 依据的是：给定两个素数p、q 很容易相乘得到n，而对n进行因式分解却相对困难。那椭圆曲线上有什么难题呢？

考虑如下等式: :math:`K=kG` [其中 K,G为Ep(a,b)上的点，k为小于n(n是点G的阶)的整数],不难发现，给定k和G，根据加法法则，计算K很容易；
但给定K和G，求k就相对困难了。

这就是椭圆曲线加密算法采用的难题。我们把点G称为基点(base point),现在我们描述一个利用椭圆曲线进行加密通信的过程:


1. 用户A选定一条椭圆曲线Ep(a,b)，并取椭圆曲线上一点，作为基点G.
2. 用户A选择一个私有密钥k，并生成公开密钥K=kG.
3. 用户A将Ep(a,b)和点K，G传给用户B.
4. 用户B接到信息后 ，将待传输的明文编码到Ep(a,b)上一点M（编码方法很多，这里不作讨论），并产生一个随机整数r
5. 用户B计算点C1=M+rK；C2=rG.
6. 用户B将C1、C2传给用户A。
7. 用户A接到信息后，计算C1-kC2，结果就是点M。因为

   .. math::

        C1-kC2=M+rK-k(rG)=M+rK-r(kG)=M
8. 再对点M进行解码就可以得到明文

在这个加密通信中，如果有一个偷窥者H ，他只能看到Ep(a,b)、K、G、C1、C2 而通过K、G 求k 或通过C2、G求r 都是相对困难的。因此，H无法得到A、B间传送的明文信息。

.. figure:: images/listen.png

密码学中，描述一条Fp上的椭圆曲线，常用到六个参量：
        
.. math::

        T=(p,a,b,G,n,h)

p 、a 、b 用来确定一条椭圆曲线，G为基点，n为点G的阶，h 是椭圆曲线上所有点的个数m与n相除的整数部分.

这几个参量取值的选择，直接影响了加密的安全性。参量值一般要求满足以下几个条件：

1. p当然越大越安全，但越大，计算速度会变慢，200位左右可以满足一般安全要求；
2. :math:`p \ne n×h` ；
3. :math:`pt \ne 1 \quad (mod \quad n),1 \le t<20` ；
4. :math:`4a^3+27b^2 \ne 0 \quad (mod \quad p)` ；
5. n为素数；
6. :math:`h \le 4` 。



SM2算法
-----------------------------

前面提到根据系数的不同，ECC曲线可以有很多，SM2使用其中一种，这就表明它的曲线方程,以及前面说到的六个参量都是固定的。根据国密局给出的规范定义如下:

        
椭圆曲线为:
        
.. math:: 

        y^2=x^3+ax+b

其六个参数变量为:

        .. code-block:: c

                p=FFFFFFFE FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF 00000000 FFFFFFFF FFFFFFFF  
                a=FFFFFFFE FFFFFFFFFFFFFFFF FFFFFFFF FFFFFFFF 00000000 FFFFFFFF FFFFFFFC  
                b=28E9FA9E 9D9F5E344D5A9E4B CF6509A7 F39789F5 15AB8F92 DDBCBD41 4D940E93  
                n=FFFFFFFE FFFFFFFFFFFFFFFF FFFFFFFF 7203DF6B 21C6052B 53BBF409 39D54123  
                Gx=32C4AE2C 1F198119 5F990446 6A39C994 8FE30BBF F2660BE1 715A4589 334C74C7  
                Gy=BC3736A2 F4F6779C 59BDCEE3 6B692153 D0A9877C C62A4740 02DF32E5 2139F0A0


                
这里容易引起一个误解，会认为参数都固定了，公私钥是不是只能有一对？当然不是，注意前面提到的K=kG的模型，K才是公钥，所以公钥其实是曲线在离散坐标系中，
满足条件的一个曲线上的点。可以有很多个。另外, 从这几个参量可以获知公钥长度都是256位。
 
基于这种离散椭圆曲线原理的SM2算法一般有三种用法，签名验签，加解密, 密钥交换。

基于openssl实现sm2
~~~~~~~~~~~~~~~~~~~~~~~





问题
----------------

* :math:`4a^3+27b^2 \ne 0 \quad (mod \quad p)` 是怎么来的?
* p 是怎么来的?
* 椭圆曲线是怎么选择的 ?


在非对称加密，签名与验签
================================

1. 密钥对:在非对称加密技术中，有两种密钥，分为私钥和公钥，私钥是密钥对所有者持有，不可公布，公钥是密钥对持有者公布给他人的。
2. 公钥:公钥用来给数据加密，用公钥加密的数据只能使用私钥解密。
3. 私钥:如上，用来解密公钥加密的数据。
4. 摘要:对需要传输的文本，做一个HASH计算，一般采用SHA1，SHA2来获得。
5. 签名:使用私钥对需要传输的文本的摘要进行加密，得到的密文即被称为该次传输过程的签名。
6. 签名验证，数据接收端，拿到传输文本，但是需要确认该文本是否就是发送发出的内容，中途是否曾经被篡改。
   因此拿自己持有的公钥对签名进行解密（密钥对中的一种密钥加密的数据必定能使用另一种密钥解密。），得到了文本的摘要，
   然后使用与发送方同样的HASH算法计算摘要值，再与解密得到的摘要做对比，发现二者完全一致，则说明文本没有被篡改过。

上面实际上介绍了加密解密和数字签名两个概念和实现过程，二者的过程正好是相反的。

在签名的过程中，有一点很关键，收到数据的一方，需要自己保管好公钥，但是要知道每一个发送方都有一个公钥，
那么接收数据的人需要保存非常多的公钥，这根本就管理不过来。并且本地保存的公钥有可能被篡改替换，无从发现。
怎么解决这一问题了？由一个统一的证书管理机构来管理所有需要发送数据方的公钥,对公钥进行认证和加密。
这个机构也就是我们常说的CA。认证加密后的公钥，即是证书，又称为CA证书，证书中包含了很多信息，最重要的是申请者的公钥。

CA机构在给公钥加密时，用的是一个统一的密钥对，在加密公钥时，用的是其中的私钥。这样，申请者拿到证书后，在发送数据时，
用自己的私钥生成签名，将签名、证书和发送内容一起发给对方，对方拿到了证书后，需要对证书解密以获取到证书中的公钥，解密需要用到CA机构的”统一密钥对“中的公钥，
这个公钥也就是我们常说的CA根证书，通常需要我们到证书颁发机构去下载并安装到相应的收取数据的客户端，如浏览器上面。这个公钥只需要安装一次。
有了这个公钥之后，就可以解密证书，拿到发送方的公钥，然后解密发送方发过来的签名，获取摘要，重新计算摘要，作对比，以验证数据内容的完整性。


流程如下:

.. figure:: images/sign.png


openssl/gmssl


Stolen from
====================
* http://8btc.com/article-138-1.html
* https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02
* https://www.zhihu.com/question/21573768
* http://blog.csdn.net/oldmtn/article/details/52208747

