ARM通用定时器
===============

Clock provider和Clock source的区别?
Clock provider:

Clock source:所谓clock source就是用来抽象一个在指定输入频率的clock下工作的一个counter。
输入频率可以确定以什么样的精度来划分timeline（假设输入counter的频率是1GHz，那么一个cycle就是1ns，也就是说timeline是用1ns来划分的，最大的精度就是1ns

Hardware block
-----------------------

See DDI0487C_a_armv8_arm Page 2322.

.. image:: images/timer-block.png

System counter->Timer_x->GIC->CPU




System counter
----------------

Timers
----------------

软件编程接口
----------------

ARM generic timer的硬件包括两个部分：一个是per cpu的timer硬件，另外一个就是system level的counter硬件。对于per cpu的timer硬件，使用system control register（CP15）来访问是最合适的，而且速度也快。要访问system level的counter硬件，当然使用memory mapped IO的形式（请注意block diagram中的APB总线，很多system level的外设都是通过APB访问的）

Timer子系统初始化
--------------------------


arm generic timer的驱动位于:driver/clocksource/arm_arch_timer.c中

CLOCKSOURCE_OF_DECLARE这个宏其实就是初始化了一个struct of_device_id的静态常量，并放置在__clksrc_of_table section中

.. code-block:: c

        //include/linux/clocksource.h
        
        #define CLOCKSOURCE_OF_DECLARE(name, compat, fn) \
        	OF_DECLARE_1_RET(clksrc, name, compat, fn)
        
         
        //include/linux/of.h
        
        #if defined(CONFIG_OF) && !defined(MODULE)
        #define _OF_DECLARE(table, name, compat, fn, fn_type)			\
        	static const struct of_device_id __of_table_##name		\
        		__used __section(__##table##_of_table)			\
        		 = { .compatible = compat,				\
        		     .data = (fn == (fn_type)NULL) ? fn : fn  }
        #elseCLOCKSOURCE_OF_DECLARE
        #define _OF_DECLARE(table, name, compat, fn, fn_type)			\
        	static const struct of_device_id __of_table_##name		\
        		__attribute__((unused))					\
        		 = { .compatible = compat,				\
        		     .data = (fn == (fn_type)NULL) ? fn : fn }
        #endif
        
        #define OF_DECLARE_1_RET(table, name, compat, fn) \
        		_OF_DECLARE(table, name, compat, fn, of_init_fn_1_ret)
        
        
        
        //arch/arm64/kernel/time.c
        void __init time_init(void)
        {
        	u32 arch_timer_rate;
        
        	of_clk_init(NULL);

                /* 该函数用于clock source的初始化 */
        	clocksource_probe();
        
        	tick_setup_hrtimer_broadcast();
        
        	arch_timer_rate = arch_timer_get_rate();
        	if (!arch_timer_rate)
        		panic("Unable to initialise architected timer.\n");
        
        	/* Calibrate the delay loop directly */
        	lpj_fine = arch_timer_rate / HZ;
        }
        
        
        __clksrc_of_table:
        /* 对__clksrc_of_table 进行遍历并依次调用其clocksource的init函数 */
        void __init clocksource_probe(void)
        {
                struct device_node *np;
                const struct of_device_id *match;
                of_init_fn_1_ret init_func_ret;
                unsigned clocksources = 0;
                int ret;
        
                for_each_matching_node_and_match(np, __clksrc_of_table, &match) {
                        if (!of_device_is_available(np))
                                continue;
        
                        init_func_ret = match->data;
        
                        ret = init_func_ret(np);
                        if (ret) {
                                pr_err("Failed to initialize '%s': %d",
                                       of_node_full_name(np), ret);
                                continue;
                        }
        
                        clocksources++;
                }
        
                clocksources += acpi_probe_device_table(clksrc);
        
                if (!clocksources)
                        pr_crit("%s: no matching clocksources found\n", __func__);
        }
        
        
        //drivers/clk/clk.c
        void __init of_clk_init(const struct of_device_id *matches)
        {
        	const struct of_device_id *match;
        	struct device_node *np;
        	struct clock_provider *clk_provider, *next;
        	bool is_init_done;
        	bool force = false;
        	LIST_HEAD(clk_provider_list);
        
        	if (!matches)
        		matches = &__clk_of_table;
        
        	/* First prepare the list of the clocks providers */
        	for_each_matching_node_and_match(np, matches, &match) {
        		struct clock_provider *parent;
        
        		if (!of_device_is_available(np))
        			continue;
        
        		parent = kzalloc(sizeof(*parent), GFP_KERNEL);
        		if (!parent) {
        			list_for_each_entry_safe(clk_provider, next,
        						 &clk_provider_list, node) {
        				list_del(&clk_provider->node);
        				of_node_put(clk_provider->np);
        				kfree(clk_provider);
        			}
        			of_node_put(np);
        			return;
        		}
        
        		parent->clk_init_cb = match->data;
        		parent->np = of_node_get(np);
        		list_add_tail(&parent->node, &clk_provider_list);
        	}
        
        	while (!list_empty(&clk_provider_list)) {
        		is_init_done = false;
        		list_for_each_entry_safe(clk_provider, next,
        					&clk_provider_list, node) {
        			if (force || parent_ready(clk_provider->np)) {
        
        				/* Don't populate platform devices */
        				of_node_set_flag(clk_provider->np,
        						 OF_POPULATED);
        
        				clk_provider->clk_init_cb(clk_provider->np);
        				of_clk_set_defaults(clk_provider->np, true);
        
        				list_del(&clk_provider->node);
        				of_node_put(clk_provider->np);
        				kfree(clk_provider);
        				is_init_done = true;
        			}
        		}
        
        		/*
        		 * We didn't manage to initialize any of the
        		 * remaining providers during the last loop, so now we
        		 * initialize all the remaining ones unconditionally
        		 * in case the clock parent was not mandatory
        		 */
        		if (!is_init_done)
        			force = true;
        	}
        }

C15 Timer初始化分析
--------------------

.. code-block:: c

        static int __init arch_timer_of_init(struct device_node *np)
        {
        	int i;

                /* --------------------------------------------------- 1 */
        	if (arch_timers_present & ARCH_CP15_TIMER) {
        		pr_warn("arch_timer: multiple nodes in dt, skipping\n");
        		return 0;
        	}
                /* 设置 ARCH_CP15_TIMER 标志,表示存在CP15 timer */
        	arch_timers_present |= ARCH_CP15_TIMER;
        
                /* --------------------------------------------------- 2 */
        	for (i = PHYS_SECURE_PPI; i < MAX_TIMER_PPI; i++)
        		arch_timer_ppi[i] = irq_of_parse_and_map(np, i);
              
                /* --------------------------------------------------- 3 */
        	arch_timer_detect_rate(NULL, np);
        
        	arch_timer_c3stop = !of_property_read_bool(np, "always-on");
        
        #ifdef CONFIG_FSL_ERRATUM_A008585
        	if (fsl_a008585_enable < 0)
        		fsl_a008585_enable = of_property_read_bool(np, "fsl,erratum-a008585");
        	if (fsl_a008585_enable) {
        		static_branch_enable(&arch_timer_read_ool_enabled);
        		pr_info("Enabling workaround for FSL erratum A-008585\n");
        	}
        #endif
        
        	if (IS_ENABLED(CONFIG_ARM) &&
        	    of_property_read_bool(np, "arm,cpu-registers-not-fw-configured"))
        		arch_timer_uses_ppi = PHYS_SECURE_PPI;
        
        	/* On some systems, the counter stops ticking when in suspend. */
        	arch_counter_suspend_stop = of_property_read_bool(np,
        							 "arm,no-tick-in-suspend");
        
        	return arch_timer_init();
        }


1. arch_timers_present用来记录系统中Timer的情况，该变量只有两个bit有效，
bit 0标识是否有CP15 timer，bit 1标识memory mapped timer是否已经初始化。
如果在调用arch_timer_init之前，ARCH_CP15_TIMER已经置位，说明之前已经
有一个ARM arch timer的device node进行了初始化的动作，这多半是由于
device tree的database中有两个或者多个cp15 timer的节点，
这时候，我们初始化一个就OK了。 


2. 这部分的代码是分配IRQ. ARM generic timer使用4个PPI的中断函数irq_of_parse_and_map对该device node中的interrupt属性进行分析，
并分配IRQ number，建立HW interrupt ID和该IRQ number的映射。至此，arch_timer_ppi数组中保存了ARM generic timer使用IRQ number。

3. arch_timer_detect_rate 这个函数用来确定system counter的输入clock频率，具体实现如下:

        .. code-block:: c
        
                static void
                arch_timer_detect_rate(void __iomem *cntbase, struct device_node *np)
                {
                	/* Who has more than one independent system counter? */
                	if (arch_timer_rate)
CLOCKSOURCE_OF_DECLARE(armv7_arch_timer_mem, "arm,armv7-timer-mem", 
                		return;
                
                	if (!acpi_disabled ||
                	    of_property_read_u32(np, "clock-frequency", &arch_timer_rate)) {
                		if (cntbase)
                			arch_timer_rate = readl_relaxed(cntbase + CNTFRQ);
                		else
                			arch_timer_rate = arch_timer_get_cntfrq();
                	}
                
                	if (arch_timer_rate == 0)
                		pr_warn("Architected timer frequency not available\n");
                }

        arch_timer_rate这个全局变量用来保存system counter的输入频率，基本上，这个数据有两个可能的来源：

        * device tree node中的clock-frequency属性
        * 寄存器CNTFRQ

        
我们优先考虑从clock-frequency属性中获取该数据，如果device node中没有定义该属性，
那么从CNTFRQ寄存器中读取。访问CNTFRQ寄存器有两种形态，
如果cntbase是NULL的话，说明是CP15 timer，可以通过协处理器来获取该值
(调用arch_timer_get_cntfrq函数）。如果给出了cntbase的值，
说明是memory mapped的方式来访问CNTFRQ寄存器（直接使用readl_relaxed函数）。

4. 
